// Backend –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Dialogflow
// –ó–∞–ø—É—Å–∫: node dialogflow-backend.js

const express = require('express');
const cors = require('cors');
const { SessionsClient } = require('@google-cloud/dialogflow');

const app = express();
const PORT = 3001;

// Middleware
app.use(cors());
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Dialogflow
const DIALOGFLOW_CONFIG = {
    // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    PROJECT_ID: 'your-project-id', // ID –ø—Ä–æ–µ–∫—Ç–∞ –≤ Google Cloud
    CREDENTIALS_PATH: './credentials.json', // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–ª—é—á–∞–º–∏
    LANGUAGE_CODE: 'ru', // –Ø–∑—ã–∫ –±–æ—Ç–∞
    SESSION_ID: 'masterplus24-session' // ID —Å–µ—Å—Å–∏–∏
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dialogflow –∫–ª–∏–µ–Ω—Ç–∞
let dialogflowClient;

try {
    dialogflowClient = new SessionsClient({
        keyFilename: DIALOGFLOW_CONFIG.CREDENTIALS_PATH,
        projectId: DIALOGFLOW_CONFIG.PROJECT_ID
    });
    console.log('‚úÖ Dialogflow –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Dialogflow:', error.message);
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª credentials.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–ª—é—á–∏');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ Dialogflow
async function sendToDialogflow(message, sessionId = DIALOGFLOW_CONFIG.SESSION_ID) {
    try {
        if (!dialogflowClient) {
            throw new Error('Dialogflow –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        const sessionPath = dialogflowClient.projectAgentSessionPath(
            DIALOGFLOW_CONFIG.PROJECT_ID,
            sessionId
        );

        const request = {
            session: sessionPath,
            queryInput: {
                text: {
                    text: message,
                    languageCode: DIALOGFLOW_CONFIG.LANGUAGE_CODE
                }
            }
        };

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Dialogflow:', message);
        
        const responses = await dialogflowClient.detectIntent(request);
        const result = responses[0].queryResult;
        
        console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç Dialogflow:', result.fulfillmentText);
        
        return {
            success: true,
            response: result.fulfillmentText,
            intent: result.intent?.displayName || 'Default Welcome Intent',
            confidence: result.intentDetectionConfidence || 0,
            parameters: result.parameters?.fields || {}
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Dialogflow:', error);
        return {
            success: false,
            error: error.message,
            fallbackResponse: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +375 29 284-84-34'
        };
    }
}

// API endpoint –¥–ª—è —á–∞—Ç–∞
app.post('/api/chat', async (req, res) => {
    try {
        const { message, sessionId } = req.body;
        
        if (!message || !message.trim()) {
            return res.status(400).json({ 
                success: false,
                error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' 
            });
        }

        console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Dialogflow
        const dialogflowResponse = await sendToDialogflow(message, sessionId);
        
        if (dialogflowResponse.success) {
            res.json({
                success: true,
                response: dialogflowResponse.response,
                intent: dialogflowResponse.intent,
                confidence: dialogflowResponse.confidence,
                parameters: dialogflowResponse.parameters,
                timestamp: new Date().toISOString()
            });
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            const fallbackResponse = getFallbackResponse(message);
            res.json({
                success: true,
                response: fallbackResponse,
                intent: 'fallback',
                confidence: 0.5,
                fallback: true,
                timestamp: new Date().toISOString()
            });
        }

    } catch (error) {
        console.error('üí• Chat API Error:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            fallbackResponse: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ó–≤–æ–Ω–∏—Ç–µ +375 29 284-84-34'
        });
    }
});

// –†–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–µ—Å–ª–∏ Dialogflow –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
function getFallbackResponse(message) {
    const msg = message.toLowerCase();
    
    if (msg.includes('—É—Å—Ç–∞–Ω–æ–≤–∫–∞') || msg.includes('—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')) {
        return '–û—Ç–ª–∏—á–Ω–æ! –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –∏ —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã. –ù–∞—à –º–∞—Å—Ç–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–∏–µ—Ö–∞—Ç—å –¥–ª—è –∑–∞–º–µ—Ä–æ–≤. –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç 150 —Ä—É–±.';
    } else if (msg.includes('—Ä–µ–º–æ–Ω—Ç')) {
        return '–ú—ã —Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–æ–∏—Ç 50 —Ä—É–±., –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ —Ä–µ–º–æ–Ω—Ç–µ. –í—ã–∑–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞?';
    } else if (msg.includes('–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ')) {
        return '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞. –ë–∞–∑–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Ç 80 —Ä—É–±. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≥–æ–¥–æ–≤—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å–æ —Å–∫–∏–¥–∫–æ–π.';
    } else if (msg.includes('—Ü–µ–Ω–∞') || msg.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å')) {
        return '–¶–µ–Ω—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–ª–∏—Ç-—Å–∏—Å—Ç–µ–º—ã –æ—Ç 150 —Ä—É–±., —Ä–µ–º–æ–Ω—Ç –æ—Ç 80 —Ä—É–±., –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Ç 80 —Ä—É–±. –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ—Å–ª–µ –æ—Å–º–æ—Ç—Ä–∞.';
    } else if (msg.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || msg.includes('—Ç–µ–ª–µ—Ñ–æ–Ω')) {
        return '–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: +375 29 284-84-34, masterplus24.by@yandex.ru. –ê–¥—Ä–µ—Å: –ú–∏–Ω—Å–∫–∏–π —Ä-–Ω, –ü—Ä–∏–ª—É–∫–∏, —É–ª. –ú–∏—Ä–∞ 31/1. –†–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ 9:00-21:00.';
    } else {
        return '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏–ª–∏ –∑–≤–æ–Ω–∏—Ç–µ +375 29 284-84-34.';
    }
}

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        service: 'Google Dialogflow Chat Backend',
        dialogflow_configured: !!dialogflowClient,
        timestamp: new Date().toISOString()
    });
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è—Ö
app.get('/api/intents', async (req, res) => {
    try {
        if (!dialogflowClient) {
            return res.json({
                success: false,
                message: 'Dialogflow –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            });
        }

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        res.json({
            success: true,
            intents: [
                'Default Welcome Intent',
                'Installation Intent',
                'Repair Intent',
                'Maintenance Intent',
                'Pricing Intent',
                'Contact Intent'
            ]
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ Dialogflow Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`ü§ñ Google Dialogflow –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞`);
    console.log(`üîó API endpoint: http://localhost:${PORT}/api/chat`);
    
    if (dialogflowClient) {
        console.log(`‚úÖ Dialogflow –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω`);
    } else {
        console.log(`‚ö†Ô∏è  Dialogflow –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã`);
    }
});

module.exports = app;
